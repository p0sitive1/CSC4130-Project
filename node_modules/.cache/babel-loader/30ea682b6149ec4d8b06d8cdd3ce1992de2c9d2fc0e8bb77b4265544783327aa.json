{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ander Shi\\\\Desktop\\\\4130_proj\\\\src\\\\App.js\",\n  _s2 = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport BarChart from './components/BarChart';\nimport * as d3 from 'd3';\nimport React, { useEffect } from 'react';\nimport ScatterPlot from './components/ScatterPlot';\nimport { cluster, filter } from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  var clusterMaker = require('clusters');\n  function useFirstRender() {\n    _s();\n    const firstRender = React.useRef(true);\n    useEffect(() => {\n      firstRender.current = false;\n    }, []);\n    return firstRender.current;\n  }\n  _s(useFirstRender, \"ATSdOeWIj8DnzpAvwLTk08ZcQSw=\");\n  const firstRender = useFirstRender();\n  var [tmpdata, settmpData] = React.useState([]);\n  var [data, setData] = React.useState([]);\n  var [selectedData, setSelectedData] = React.useState(data);\n  var [n_clus, set_n_clus] = React.useState(3);\n  var [n_iters, set_n_iters] = React.useState(1000);\n  var clusters = [];\n  var processed = [];\n  React.useEffect(() => {\n    loadData();\n    if (!(firstRender || tmpdata == [])) {\n      processData();\n    }\n  }, [firstRender]);\n  const colorScale = d3.scaleOrdinal().range(['#d3eecd', '#7bc77e', '#2a8d46']).domain([1, 'Intermediate', 'Difficult']);\n  const loadData = () => {\n    // data adapted from CSC3020\n    d3.csv('./generatedData.csv').then(_data => {\n      settmpData(_data.map(d => {\n        d.width = +d.width;\n        d.length = +d.length;\n        return [d.length, d.width];\n      }));\n    });\n  };\n  const processData = () => {\n    clusterMaker.k(n_clus);\n    clusterMaker.iterations(n_iters);\n    clusterMaker.data(tmpdata);\n    clusters = clusterMaker.clusters();\n    for (var i = 0; i < clusters.length; i++) {\n      for (var j = 0; j < clusters[i].points.length; j++) {\n        var tmp = {\n          \"length\": clusters[i].points[j][0],\n          \"width\": clusters[i].points[j][1],\n          \"cluster\": i\n        };\n        processed.push(tmp);\n      }\n    }\n    setData(processed);\n  };\n  React.useEffect(() => {\n    updateData();\n  }, [data, selectedData]);\n  const updateData = () => {\n    setSelectedData(data);\n  };\n  React.useEffect(() => {}, []);\n  function updateparam() {\n    C = document.getElementById(\"n_clusters\");\n    I = document.getElementById(\"n_iters\");\n    set_n_clus(C.value);\n    set_n_iters(I.value);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"head\",\n      children: \" CSC4130 Project \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(ScatterPlot, {\n        config: colorScale,\n        data: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Number of clusters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"n_clusters\",\n        oninput: \"updateparam()\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 81\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Number of iterations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"n_iters\",\n        oninput: \"updateparam()\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n}\n_s2(App, \"ANOSorQQ3bJmqlrTiHruSPbznVM=\", false, function () {\n  return [useFirstRender];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","BarChart","d3","React","useEffect","ScatterPlot","cluster","filter","App","clusterMaker","require","useFirstRender","firstRender","useRef","current","tmpdata","settmpData","useState","data","setData","selectedData","setSelectedData","n_clus","set_n_clus","n_iters","set_n_iters","clusters","processed","loadData","processData","colorScale","scaleOrdinal","range","domain","csv","then","_data","map","d","width","length","k","iterations","i","j","points","tmp","push","updateData","updateparam","C","document","getElementById","I","value"],"sources":["C:/Users/Ander Shi/Desktop/4130_proj/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport BarChart from './components/BarChart';\nimport * as d3 from 'd3';\nimport React, { useEffect } from 'react';\nimport ScatterPlot from './components/ScatterPlot';\nimport { cluster, filter } from 'd3';\n\n\nfunction App() {\n\n    var clusterMaker = require('clusters');\n\n    function useFirstRender() {\n        const firstRender= React.useRef(true);\n\n        useEffect(() => {\n            firstRender.current = false;\n        }, []);\n\n        return firstRender.current;\n    } \n\n    const firstRender = useFirstRender();\n\n    var [tmpdata, settmpData] = React.useState([]);\n    var [data, setData] = React.useState([]);\n    var [selectedData, setSelectedData] = React.useState(data);\n    var [n_clus, set_n_clus] = React.useState(3);\n    var [n_iters, set_n_iters] = React.useState(1000);\n    var clusters = [];\n    var processed = [];\n\n    \n    React.useEffect(() => {\n        loadData();\n        if (!(firstRender || tmpdata == [])) {\n            processData();\n        }\n    },[firstRender])\n\n    \n    const colorScale = d3.scaleOrdinal()\n        .range(['#d3eecd', '#7bc77e', '#2a8d46']) \n        .domain([1,'Intermediate','Difficult']);\n\n    const loadData = () => {\n        // data adapted from CSC3020\n        d3.csv('./generatedData.csv') \n        .then(_data => {\n            settmpData(_data.map(d => {\n                d.width = +d.width;\n                d.length = +d.length;   \n                return [d.length, d.width]\n            }));\n        })\n    }\n\n    const processData = () => {\n        clusterMaker.k(n_clus);\n        clusterMaker.iterations(n_iters);\n        clusterMaker.data(tmpdata)\n        clusters = clusterMaker.clusters()\n        for (var i=0; i<clusters.length; i++){\n            for (var j=0; j<clusters[i].points.length;j++){\n                var tmp = {\n                    \"length\": clusters[i].points[j][0],\n                    \"width\": clusters[i].points[j][1],\n                    \"cluster\": i\n                }\n                processed.push(tmp)\n            }\n        }\n        setData(processed);\n    }\n\n    React.useEffect(() => {\n        updateData();\n    }, [data, selectedData])\n\n    const updateData = () => {\n        setSelectedData(data)\n    }\n\n    React.useEffect(() => {\n\n    }, [])\n\n    function updateparam(){\n        C = document.getElementById(\"n_clusters\")\n        I = document.getElementById(\"n_iters\")\n        set_n_clus(C.value)\n        set_n_iters(I.value)\n    }\n\n    return (\n        <div className='Container'>\n        <h1 className='head'> CSC4130 Project </h1>\n        <div className=\"App\">\n        <ScatterPlot config={colorScale} data={data}/>\n        </div>\n        <div className=\"input\">\n            <label>Number of clusters</label>\n            <input type='number' id=\"n_clusters\"oninput=\"updateparam()\"></input><br></br>\n            <label>Number of iterations</label>\n            <input type='number' id=\"n_iters\" oninput=\"updateparam()\"></input>\n        </div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}